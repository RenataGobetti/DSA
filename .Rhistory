idh_tcc <- hdi %>%
select(all_of(colunas))
# Remover observações específicas da variável country
idh_tcc <- idh_tcc %>%
filter(country != "World" &
country != "Very high human development" &
country != "Sub-Saharan Africa" &
country != "South Asia" &
country != "Monaco" &
country != "Medium human development" &
country != "Low human development" &
country != "Latin America and the Caribbean" &
country != "Korea (Democratic People's Rep. of)" &
country != "High human development" &
country != "Europe and Central Asia" &
country != "East Asia and the Pacific")
# Renomear as colunas country e hdicode
names(idh_tcc)[1] <- "pais"
names(idh_tcc)[2] <- "idh_nivel"
# Renomear as colunas para substituir "hdi_" pelo ano correspondente
names(idh_tcc)[grep("^hdi_", names(idh_tcc))] <- gsub("^hdi_(\\d{4})$", "\\1", names(idh_tcc)[grep("^hdi_", names(idh_tcc))])
# Transpor a tabela idh_tcc
idh_transposta <- pivot_longer(idh_tcc, cols = -c(pais, idh_nivel), names_to = "ano", values_to = "idh_valor")
# Manipulacao de dados e data wrangling em arquivo baixado diretamente do databank.worldbank.org
# Ler o arquivo CSV do World Bank
worldbankdatabase <- read.csv(file.choose())
# Remover colunas desnecessarias
worldbankdatabase <- worldbankdatabase[, -c(2, 4)]
# Renomear colunas com anos
novos_nomes <- c("pais", "series.name", paste0(2000:2020))
colnames(worldbankdatabase) <- novos_nomes
# Usar a biblioteca tidyr para converter os dados para o formato "long"
worldbankdatabase <- worldbankdatabase %>%
pivot_longer(cols = -c(pais, series.name), names_to = "ano", values_to = "valor")
# Deletar linhas vazias
worldbankdatabase <- worldbankdatabase %>%
filter(pais != "", pais != "Data from database: World Development Indicators", pais != "Last Updated: 03/28/2024")
# Usar a biblioteca tidyr para converter os dados de volta para o formato "wide"
worldbankdatabase <- worldbankdatabase %>%
pivot_wider(names_from = series.name, values_from = valor)
# Juncao dos dois conjuntos de dados: kaggledatabasewr e worldbankdatabase
data_tcc <- merge(kaggledatabasewr, worldbankdatabase, by = c("pais", "ano"))
# Filtrar apenas os paises presentes no conjunto de dados kaggledatabasewr
data_tcc <- data_tcc[data_tcc$pais %in% kaggledatabasewr$pais, ]
# Converter o ano para formato numerico
data_tcc$ano <- as.numeric(data_tcc$ano)
# Arredondar a coluna "acesso_eletricidade_populacao_percent" para duas casas decimais
data_tcc$acesso_eletricidade_populacao_percent <- round(data_tcc$acesso_eletricidade_populacao_percent, 2)
# Arredondar a coluna "pib_per_capita_dolar" para duas casas decimais
data_tcc$pib_per_capita_dolar <- round(data_tcc$pib_per_capita_dolar, 2)
# Renomear a coluna "Life expectancy at birth, total (years)" para "life_expectancy_years"
names(data_tcc)[names(data_tcc) == "Life expectancy at birth, total (years)"] <- "life_expectancy_years"
# Converter a coluna "life_expectancy_years" para numerico
data_tcc$life_expectancy_years <- as.numeric(data_tcc$life_expectancy_years)
# Remover casas decimais da coluna "life_expectancy_years"
data_tcc$life_expectancy_years <- round(data_tcc$life_expectancy_years, digits = 0)
# Renomear a coluna "Population, total" para "total_population"
names(data_tcc)[names(data_tcc) == "Population, total"] <- "total_population"
#Converter total_population para formato numero
data_tcc$total_population <- as.numeric(data_tcc$total_population)
#Renomear a coluna "Electric power consumption (kWh per capita)"
names(data_tcc)[names(data_tcc) == "Electric power consumption (kWh per capita)"] <- "consumption_kwh_per_capita"
#Converter consumption_kwh_per_capita para formato numero
data_tcc$consumption_kwh_per_capita <- as.numeric(data_tcc$consumption_kwh_per_capita)
#Remover casas decimais da coluna "consumption_kwh_per_capita"
data_tcc$`consumption_kwh_per_capita` <- round(data_tcc$`consumption_kwh_per_capita`, digits = 0)
#####Merge da tabela idh_tcc com data_tcc#######
data_tcc <- merge(data_tcc, idh_transposta, by = c("pais", "ano"), all.x = TRUE)
#Verificar paises da tabela (atualmente temos 195 paises reconhecidos pela ONU)
paises_unicos_data_tcc <- unique(data_tcc$pais)
print(paises_unicos_data_tcc)
pais <- paises_unicos_data_tcc
# Calcula a matriz de correlação entre as variáveis selecionadas
correlation_matrix <- cor(data_tcc[, c("acesso_eletricidade_populacao_percent",
"CO2_emissao_kt_por_pais",
"pib_per_capita_dolar",
"life_expectancy_years",
"total_population")],
use="pairwise.complete.obs")
# Lista de países reconhecidos pela ONU
paises_onu <- c(
"Afghanistan", "Albania", "Algeria", "Andorra", "Angola", "Antigua and Barbuda", "Argentina", "Armenia",
"Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus",
"Belgium", "Belize", "Benin", "Bhutan", "Bolivia", "Bosnia and Herzegovina", "Botswana", "Brazil",
"Brunei", "Bulgaria", "Burkina Faso", "Burundi", "Cabo Verde", "Cambodia", "Cameroon", "Canada",
"Central African Republic", "Chad", "Chile", "China", "Colombia", "Comoros", "Congo (Congo-Brazzaville)",
"Costa Rica", "Croatia", "Cuba", "Cyprus", "Czechia (Czech Republic)", "Denmark", "Djibouti",
"Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea",
"Estonia", "Eswatini (fmr. Swaziland)", "Ethiopia", "Fiji", "Finland", "France", "Gabon", "Gambia",
"Georgia", "Germany", "Ghana", "Greece", "Grenada", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana",
"Haiti", "Honduras", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Israel",
"Italy", "Ivory Coast", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait",
"Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania",
"Luxembourg", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands",
"Mauritania", "Mauritius", "Mexico", "Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro",
"Morocco", "Mozambique", "Myanmar (formerly Burma)", "Namibia", "Nauru", "Nepal", "Netherlands",
"New Zealand", "Nicaragua", "Niger", "Nigeria", "North Korea", "North Macedonia (formerly Macedonia)",
"Norway", "Oman", "Pakistan", "Palau", "Palestine State", "Panama", "Papua New Guinea", "Paraguay",
"Peru", "Philippines", "Poland", "Portugal", "Qatar", "Romania", "Russia", "Rwanda", "Saint Kitts and Nevis",
"Saint Lucia", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe",
"Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Slovakia", "Slovenia",
"Solomon Islands", "Somalia", "South Africa", "South Korea", "South Sudan", "Spain", "Sri Lanka", "Sudan",
"Suriname", "Sweden", "Switzerland", "Syria", "Tajikistan", "Tanzania", "Thailand", "Timor-Leste", "Togo",
"Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Tuvalu", "Uganda", "Ukraine",
"United Arab Emirates", "United Kingdom", "United States of America", "Uruguay", "Uzbekistan", "Vanuatu",
"Vatican City", "Venezuela", "Vietnam", "Yemen", "Zambia", "Zimbabwe"
)
# Função para encontrar correspondências parciais
find_partial_matches <- function(target, candidates) {
partial_matches <- lapply(candidates, function(x) grep(x, target, ignore.case = TRUE))
names(partial_matches) <- candidates
partial_matches <- Filter(function(x) length(x) > 0, partial_matches)
return(partial_matches)
}
# Encontrar correspondências parciais na lista de países
correspondencias <- find_partial_matches(tolower(paises_onu), tolower(paises_unicos_data_tcc))
View(correspondencias)
# Imprimir correspondências encontradas
print(correspondencias)
View(correspondencias)
print(paises_unicos_data_tcc)
#####DATA WRANGLING#####
#Pacotes utlizados
library(dplyr)
library(tidyr)
# Manipulacao do dataset baixado do Kaggle
# Ler o arquivo CSV do Kaggle
kaggledatabase <- read.csv(file.choose())
# Selecionar apenas as colunas relevantes
kaggledatabasewr <- kaggledatabase[, c("Entity", "Year", "Access.to.electricity....of.population.", "Value_co2_emissions_kt_by_country",
"gdp_per_capita", "Land.Area.Km2.")]
# Renomear as colunas para nomes mais descritivos
names(kaggledatabasewr) <- c("pais", "ano", "acesso_eletricidade_populacao_percent",
"CO2_emissao_kt_por_pais",
"pib_per_capita_dolar", "area_km2")
###Adicionar IDH#######
hdi <- read.csv(choose.files())
# Selecionar as colunas desejadas
colunas <- c("country", "hdicode", paste0("hdi_", 2000:2020))
idh_tcc <- hdi %>%
select(all_of(colunas))
# Remover observações específicas da variável country
idh_tcc <- idh_tcc %>%
filter(country != "World" &
country != "Very high human development" &
country != "Sub-Saharan Africa" &
country != "South Asia" &
country != "Monaco" &
country != "Medium human development" &
country != "Low human development" &
country != "Latin America and the Caribbean" &
country != "Korea (Democratic People's Rep. of)" &
country != "High human development" &
country != "Europe and Central Asia" &
country != "East Asia and the Pacific")
# Renomear as colunas country e hdicode
names(idh_tcc)[1] <- "pais"
names(idh_tcc)[2] <- "idh_nivel"
# Renomear as colunas para substituir "hdi_" pelo ano correspondente
names(idh_tcc)[grep("^hdi_", names(idh_tcc))] <- gsub("^hdi_(\\d{4})$", "\\1", names(idh_tcc)[grep("^hdi_", names(idh_tcc))])
# Transpor a tabela idh_tcc
idh_transposta <- pivot_longer(idh_tcc, cols = -c(pais, idh_nivel), names_to = "ano", values_to = "idh_valor")
# Manipulacao de dados e data wrangling em arquivo baixado diretamente do databank.worldbank.org
# Ler o arquivo CSV do World Bank
worldbankdatabase <- read.csv(file.choose())
# Remover colunas desnecessarias
worldbankdatabase <- worldbankdatabase[, -c(2, 4)]
# Renomear colunas com anos
novos_nomes <- c("pais", "series.name", paste0(2000:2020))
colnames(worldbankdatabase) <- novos_nomes
# Usar a biblioteca tidyr para converter os dados para o formato "long"
worldbankdatabase <- worldbankdatabase %>%
pivot_longer(cols = -c(pais, series.name), names_to = "ano", values_to = "valor")
# Deletar linhas vazias
worldbankdatabase <- worldbankdatabase %>%
filter(pais != "", pais != "Data from database: World Development Indicators", pais != "Last Updated: 03/28/2024")
# Usar a biblioteca tidyr para converter os dados de volta para o formato "wide"
worldbankdatabase <- worldbankdatabase %>%
pivot_wider(names_from = series.name, values_from = valor)
# Juncao dos dois conjuntos de dados: kaggledatabasewr e worldbankdatabase
data_tcc <- merge(kaggledatabasewr, worldbankdatabase, by = c("pais", "ano"))
# Filtrar apenas os paises presentes no conjunto de dados kaggledatabasewr
data_tcc <- data_tcc[data_tcc$pais %in% kaggledatabasewr$pais, ]
# Converter o ano para formato numerico
data_tcc$ano <- as.numeric(data_tcc$ano)
# Arredondar a coluna "acesso_eletricidade_populacao_percent" para duas casas decimais
data_tcc$acesso_eletricidade_populacao_percent <- round(data_tcc$acesso_eletricidade_populacao_percent, 2)
# Arredondar a coluna "pib_per_capita_dolar" para duas casas decimais
data_tcc$pib_per_capita_dolar <- round(data_tcc$pib_per_capita_dolar, 2)
# Renomear a coluna "Life expectancy at birth, total (years)" para "life_expectancy_years"
names(data_tcc)[names(data_tcc) == "Life expectancy at birth, total (years)"] <- "life_expectancy_years"
# Converter a coluna "life_expectancy_years" para numerico
data_tcc$life_expectancy_years <- as.numeric(data_tcc$life_expectancy_years)
# Remover casas decimais da coluna "life_expectancy_years"
data_tcc$life_expectancy_years <- round(data_tcc$life_expectancy_years, digits = 0)
# Renomear a coluna "Population, total" para "total_population"
names(data_tcc)[names(data_tcc) == "Population, total"] <- "total_population"
#Converter total_population para formato numero
data_tcc$total_population <- as.numeric(data_tcc$total_population)
#Renomear a coluna "Electric power consumption (kWh per capita)"
names(data_tcc)[names(data_tcc) == "Electric power consumption (kWh per capita)"] <- "consumption_kwh_per_capita"
#Converter consumption_kwh_per_capita para formato numero
data_tcc$consumption_kwh_per_capita <- as.numeric(data_tcc$consumption_kwh_per_capita)
#Remover casas decimais da coluna "consumption_kwh_per_capita"
data_tcc$`consumption_kwh_per_capita` <- round(data_tcc$`consumption_kwh_per_capita`, digits = 0)
#####Merge da tabela idh_tcc com data_tcc#######
data_tcc <- merge(data_tcc, idh_transposta, by = c("pais", "ano"), all.x = TRUE)
#Verificar paises da tabela (atualmente temos 195 paises reconhecidos pela ONU)
paises_unicos_data_tcc <- unique(data_tcc$pais)
print(paises_unicos_data_tcc)
# Lista de países para remover
paises_remover <- c("Aruba", "Bermuda", "Cayman Islands", "New Caledonia", "Puerto Rico")
# Selecionar apenas as linhas que correspondem aos países a serem removidos
paises_para_remover <- data_tcc[data_tcc$`pais` %in% paises_remover, "pais"]
# Visualizar os países que serão removidos
print(paises_para_remover)
# Remover linhas correspondentes aos países a remover
data_tcc <- data_tcc[!(data_tcc$`pais` %in% paises_remover), ]
bermuda_presente <- any(data_tcc$`pais` == "Bermuda")
print(bermuda_presente)
#####DATA WRANGLING#####
#Pacotes utlizados
library(dplyr)
library(tidyr)
# Manipulacao do dataset baixado do Kaggle
# Ler o arquivo CSV do Kaggle
kaggledatabase <- read.csv(file.choose())
# Selecionar apenas as colunas relevantes
kaggledatabasewr <- kaggledatabase[, c("Entity", "Year", "Access.to.electricity....of.population.", "Value_co2_emissions_kt_by_country",
"gdp_per_capita", "Land.Area.Km2.")]
# Renomear as colunas para nomes mais descritivos
names(kaggledatabasewr) <- c("pais", "ano", "acesso_eletricidade_populacao_percent",
"CO2_emissao_kt_por_pais",
"pib_per_capita_dolar", "area_km2")
###Adicionar IDH#######
hdi <- read.csv(choose.files())
# Selecionar as colunas desejadas
colunas <- c("country", "hdicode", paste0("hdi_", 2000:2020))
idh_tcc <- hdi %>%
select(all_of(colunas))
# Remover observações específicas da variável country
idh_tcc <- idh_tcc %>%
filter(country != "World" &
country != "Very high human development" &
country != "Sub-Saharan Africa" &
country != "South Asia" &
country != "Monaco" &
country != "Medium human development" &
country != "Low human development" &
country != "Latin America and the Caribbean" &
country != "Korea (Democratic People's Rep. of)" &
country != "High human development" &
country != "Europe and Central Asia" &
country != "East Asia and the Pacific")
# Renomear as colunas country e hdicode
names(idh_tcc)[1] <- "pais"
names(idh_tcc)[2] <- "idh_nivel"
# Renomear as colunas para substituir "hdi_" pelo ano correspondente
names(idh_tcc)[grep("^hdi_", names(idh_tcc))] <- gsub("^hdi_(\\d{4})$", "\\1", names(idh_tcc)[grep("^hdi_", names(idh_tcc))])
# Transpor a tabela idh_tcc
idh_transposta <- pivot_longer(idh_tcc, cols = -c(pais, idh_nivel), names_to = "ano", values_to = "idh_valor")
# Manipulacao de dados e data wrangling em arquivo baixado diretamente do databank.worldbank.org
# Ler o arquivo CSV do World Bank
worldbankdatabase <- read.csv(file.choose())
# Remover colunas desnecessarias
worldbankdatabase <- worldbankdatabase[, -c(2, 4)]
# Renomear colunas com anos
novos_nomes <- c("pais", "series.name", paste0(2000:2020))
colnames(worldbankdatabase) <- novos_nomes
# Usar a biblioteca tidyr para converter os dados para o formato "long"
worldbankdatabase <- worldbankdatabase %>%
pivot_longer(cols = -c(pais, series.name), names_to = "ano", values_to = "valor")
# Deletar linhas vazias
worldbankdatabase <- worldbankdatabase %>%
filter(pais != "", pais != "Data from database: World Development Indicators", pais != "Last Updated: 03/28/2024")
# Usar a biblioteca tidyr para converter os dados de volta para o formato "wide"
worldbankdatabase <- worldbankdatabase %>%
pivot_wider(names_from = series.name, values_from = valor)
# Juncao dos dois conjuntos de dados: kaggledatabasewr e worldbankdatabase
data_tcc <- merge(kaggledatabasewr, worldbankdatabase, by = c("pais", "ano"))
# Filtrar apenas os paises presentes no conjunto de dados kaggledatabasewr
data_tcc <- data_tcc[data_tcc$pais %in% kaggledatabasewr$pais, ]
# Converter o ano para formato numerico
data_tcc$ano <- as.numeric(data_tcc$ano)
# Arredondar a coluna "acesso_eletricidade_populacao_percent" para duas casas decimais
data_tcc$acesso_eletricidade_populacao_percent <- round(data_tcc$acesso_eletricidade_populacao_percent, 2)
# Arredondar a coluna "pib_per_capita_dolar" para duas casas decimais
data_tcc$pib_per_capita_dolar <- round(data_tcc$pib_per_capita_dolar, 2)
# Renomear a coluna "Life expectancy at birth, total (years)" para "life_expectancy_years"
names(data_tcc)[names(data_tcc) == "Life expectancy at birth, total (years)"] <- "life_expectancy_years"
# Converter a coluna "life_expectancy_years" para numerico
data_tcc$life_expectancy_years <- as.numeric(data_tcc$life_expectancy_years)
# Remover casas decimais da coluna "life_expectancy_years"
data_tcc$life_expectancy_years <- round(data_tcc$life_expectancy_years, digits = 0)
# Renomear a coluna "Population, total" para "total_population"
names(data_tcc)[names(data_tcc) == "Population, total"] <- "total_population"
#Converter total_population para formato numero
data_tcc$total_population <- as.numeric(data_tcc$total_population)
#Renomear a coluna "Electric power consumption (kWh per capita)"
names(data_tcc)[names(data_tcc) == "Electric power consumption (kWh per capita)"] <- "consumption_kwh_per_capita"
#Converter consumption_kwh_per_capita para formato numero
data_tcc$consumption_kwh_per_capita <- as.numeric(data_tcc$consumption_kwh_per_capita)
#Remover casas decimais da coluna "consumption_kwh_per_capita"
data_tcc$`consumption_kwh_per_capita` <- round(data_tcc$`consumption_kwh_per_capita`, digits = 0)
#####Merge da tabela idh_tcc com data_tcc#######
data_tcc <- merge(data_tcc, idh_transposta, by = c("pais", "ano"), all.x = TRUE)
#Verificar paises da tabela (atualmente temos 195 paises reconhecidos pela ONU)
paises_unicos_data_tcc <- unique(data_tcc$pais)
print(paises_unicos_data_tcc)
# Lista de países para remover
paises_remover <- c("Aruba", "Bermuda", "Cayman Islands", "New Caledonia", "Puerto Rico")
# Selecionar apenas as linhas que correspondem aos países a serem removidos
paises_para_remover <- data_tcc[data_tcc$`pais` %in% paises_remover, "pais"]
# Visualizar os países que serão removidos
print(paises_para_remover)
# Remover linhas correspondentes aos países a remover
data_tcc <- data_tcc[!(data_tcc$`pais` %in% paises_remover), ]
View(data_tcc)
#####DATA WRANGLING#####
#Pacotes utlizados
library(dplyr)
library(tidyr)
# Manipulacao do dataset baixado do Kaggle
# Ler o arquivo CSV do Kaggle
kaggledatabase <- read.csv(file.choose())
# Selecionar apenas as colunas relevantes
kaggledatabasewr <- kaggledatabase[, c("Entity", "Year", "Access.to.electricity....of.population.", "Value_co2_emissions_kt_by_country",
"gdp_per_capita", "Land.Area.Km2.")]
# Renomear as colunas para nomes mais descritivos
names(kaggledatabasewr) <- c("pais", "ano", "acesso_eletricidade_populacao_percent",
"CO2_emissao_kt_por_pais",
"pib_per_capita_dolar", "area_km2")
###Adicionar IDH#######
hdi <- read.csv(choose.files())
# Selecionar as colunas desejadas
colunas <- c("country", "hdicode", paste0("hdi_", 2000:2020))
idh_tcc <- hdi %>%
select(all_of(colunas))
# Remover observações específicas da variável country
idh_tcc <- idh_tcc %>%
filter(country != "World" &
country != "Very high human development" &
country != "Sub-Saharan Africa" &
country != "South Asia" &
country != "Monaco" &
country != "Medium human development" &
country != "Low human development" &
country != "Latin America and the Caribbean" &
country != "Korea (Democratic People's Rep. of)" &
country != "High human development" &
country != "Europe and Central Asia" &
country != "East Asia and the Pacific")
# Renomear as colunas country e hdicode
names(idh_tcc)[1] <- "pais"
names(idh_tcc)[2] <- "idh_nivel"
# Renomear as colunas para substituir "hdi_" pelo ano correspondente
names(idh_tcc)[grep("^hdi_", names(idh_tcc))] <- gsub("^hdi_(\\d{4})$", "\\1", names(idh_tcc)[grep("^hdi_", names(idh_tcc))])
# Transpor a tabela idh_tcc
idh_transposta <- pivot_longer(idh_tcc, cols = -c(pais, idh_nivel), names_to = "ano", values_to = "idh_valor")
# Manipulacao de dados e data wrangling em arquivo baixado diretamente do databank.worldbank.org
# Ler o arquivo CSV do World Bank
worldbankdatabase <- read.csv(file.choose())
# Remover colunas desnecessarias
worldbankdatabase <- worldbankdatabase[, -c(2, 4)]
# Renomear colunas com anos
novos_nomes <- c("pais", "series.name", paste0(2000:2020))
colnames(worldbankdatabase) <- novos_nomes
# Usar a biblioteca tidyr para converter os dados para o formato "long"
worldbankdatabase <- worldbankdatabase %>%
pivot_longer(cols = -c(pais, series.name), names_to = "ano", values_to = "valor")
# Deletar linhas vazias
worldbankdatabase <- worldbankdatabase %>%
filter(pais != "", pais != "Data from database: World Development Indicators", pais != "Last Updated: 03/28/2024")
# Usar a biblioteca tidyr para converter os dados de volta para o formato "wide"
worldbankdatabase <- worldbankdatabase %>%
pivot_wider(names_from = series.name, values_from = valor)
# Juncao dos dois conjuntos de dados: kaggledatabasewr e worldbankdatabase
data_tcc <- merge(kaggledatabasewr, worldbankdatabase, by = c("pais", "ano"))
# Filtrar apenas os paises presentes no conjunto de dados kaggledatabasewr
data_tcc <- data_tcc[data_tcc$pais %in% kaggledatabasewr$pais, ]
# Converter o ano para formato numerico
data_tcc$ano <- as.numeric(data_tcc$ano)
# Arredondar a coluna "acesso_eletricidade_populacao_percent" para duas casas decimais
data_tcc$acesso_eletricidade_populacao_percent <- round(data_tcc$acesso_eletricidade_populacao_percent, 2)
# Arredondar a coluna "pib_per_capita_dolar" para duas casas decimais
data_tcc$pib_per_capita_dolar <- round(data_tcc$pib_per_capita_dolar, 2)
# Renomear a coluna "Life expectancy at birth, total (years)" para "life_expectancy_years"
names(data_tcc)[names(data_tcc) == "Life expectancy at birth, total (years)"] <- "life_expectancy_years"
# Converter a coluna "life_expectancy_years" para numerico
data_tcc$life_expectancy_years <- as.numeric(data_tcc$life_expectancy_years)
# Remover casas decimais da coluna "life_expectancy_years"
data_tcc$life_expectancy_years <- round(data_tcc$life_expectancy_years, digits = 0)
# Renomear a coluna "Population, total" para "total_population"
names(data_tcc)[names(data_tcc) == "Population, total"] <- "total_population"
#Converter total_population para formato numero
data_tcc$total_population <- as.numeric(data_tcc$total_population)
#Renomear a coluna "Electric power consumption (kWh per capita)"
names(data_tcc)[names(data_tcc) == "Electric power consumption (kWh per capita)"] <- "consumption_kwh_per_capita"
#Converter consumption_kwh_per_capita para formato numero
data_tcc$consumption_kwh_per_capita <- as.numeric(data_tcc$consumption_kwh_per_capita)
#Remover casas decimais da coluna "consumption_kwh_per_capita"
data_tcc$`consumption_kwh_per_capita` <- round(data_tcc$`consumption_kwh_per_capita`, digits = 0)
#####Merge da tabela idh_tcc com data_tcc#######
data_tcc <- merge(data_tcc, idh_transposta, by = c("pais", "ano"), all.x = TRUE)
#Verificar paises da tabela (atualmente temos 195 paises reconhecidos pela ONU)
paises_unicos_data_tcc <- unique(data_tcc$pais)
print(paises_unicos_data_tcc)
# Lista de países para remover
paises_remover <- c("Aruba", "Bermuda", "Cayman Islands", "New Caledonia", "Puerto Rico")
# Visualizar os países que serão removidos
print(paises_para_remover)
# Remover linhas correspondentes aos países a remover
data_tcc <- data_tcc[!(data_tcc$`pais` %in% paises_remover), ]
head(data_tcc)
# Imprime a matriz de correlação
str(correlation_matrix)
# Imprime a matriz de correlação
srt(correlation_matrix)
srt(data_tcc)
str(data_tcc)
library(dplyr)
library(tidyr)
# Ler o arquivo CSV do Kaggle
kaggledatabase <- read.csv(file.choose())
# Selecionar apenas as colunas relevantes
kaggledatabasewr <- kaggledatabase[, c("Entity", "Year", "Access.to.electricity....of.population.", "Value_co2_emissions_kt_by_country",
"gdp_per_capita", "Land.Area.Km2.")]
# Renomear as colunas
names(kaggledatabasewr) <- c("pais", "ano", "acesso_eletricidade_populacao_porcent",
"CO2_emissao_kt_por_pais",
"pib_per_capita_dolar", "area_km2")
hdi <- read.csv(choose.files())
# Selecionar apenas as colunas relevantes
colunas <- c("country", "hdicode", paste0("hdi_", 2000:2020))
idh_tcc <- hdi %>%
select(all_of(colunas))
# Filtrar dados relevantes em Country
idh_tcc <- idh_tcc %>%
filter(country != "World" &
country != "Very high human development" &
country != "Sub-Saharan Africa" &
country != "South Asia" &
country != "Monaco" &
country != "Medium human development" &
country != "Low human development" &
country != "Latin America and the Caribbean" &
country != "Korea (Democratic People's Rep. of)" &
country != "High human development" &
country != "Europe and Central Asia" &
country != "East Asia and the Pacific")
# Renomear as colunas country e hdicode para nomes em portugues
names(idh_tcc)[1] <- "pais"
names(idh_tcc)[2] <- "idh_nivel"
# Renomear as colunas para substituir "hdi_" pelo ano correspondente
names(idh_tcc)[grep("^hdi_", names(idh_tcc))] <- gsub("^hdi_(\\d{4})$", "\\1", names(idh_tcc)[grep("^hdi_", names(idh_tcc))])
# Transpor a tabela idh_tcc
idh_transposta <- pivot_longer(idh_tcc, cols = -c(pais, idh_nivel), names_to = "ano", values_to = "idh_valor")
# Ler o arquivo CSV do World Bank
worldbankdatabase <- read.csv(file.choose())
# Remover colunas desnecessarias
worldbankdatabase <- worldbankdatabase[, -c(2, 4)]
# Renomear colunas com anos
novos_nomes <- c("pais", "series.name", paste0(2000:2020))
colnames(worldbankdatabase) <- novos_nomes
# Restruturacao de dados
worldbankdatabase <- worldbankdatabase %>%
pivot_longer(cols = -c(pais, series.name), names_to = "ano", values_to = "valor")
# Deletar linhas vazias
worldbankdatabase <- worldbankdatabase %>%
filter(pais != "", pais != "Data from database: World Development Indicators", pais != "Last Updated: 03/28/2024")
# Converter os dados de volta para o formato wide
worldbankdatabase <- worldbankdatabase %>%
pivot_wider(names_from = series.name, values_from = valor)
# Juncao dos dois conjuntos de dados: kaggledatabasewr e worldbankdatabase
data_tcc <- merge(kaggledatabasewr, worldbankdatabase, by = c("pais", "ano"))
# Filtrar apenas os paises presentes no conjunto de dados kaggledatabasewr
data_tcc <- data_tcc[data_tcc$pais %in% kaggledatabasewr$pais, ]
# Converter o ano para formato numerico
data_tcc$ano <- as.numeric(data_tcc$ano)
# Arredondar a coluna "acesso_eletricidade_populacao_percent" para duas casas decimais
data_tcc$acesso_eletricidade_populacao_percent <- round(data_tcc$acesso_eletricidade_populacao_percent, 2)
# Arredondar a coluna "pib_per_capita_dolar" para duas casas decimais
data_tcc$pib_per_capita_dolar <- round(data_tcc$pib_per_capita_dolar, 2)
# Renomear a coluna "Life expectancy at birth, total (years)" para "expectativa_vida"
names(data_tcc)[names(data_tcc) == "Life expectancy at birth, total (years)"] <- "expectativa_vida"
# Converter a coluna "expectativa_vida" para numerico
data_tcc$expectativa_vida <- as.numeric(data_tcc$expectativa_vida)
# Remover casas decimais da coluna "expectativa_vida"
data_tcc$expectativa_vida <- round(data_tcc$expectativa_vida, digits = 0)
# Renomear a coluna "Population, total" para "total_populacao"
names(data_tcc)[names(data_tcc) == "Population, total"] <- "total_populacao"
#Converter total_populacao para formato numero
data_tcc$total_populacao <- as.numeric(data_tcc$total_populacao)
#Renomear a coluna "Electric power consumption (kWh per capita)"
names(data_tcc)[names(data_tcc) == "Electric power consumption (kWh per capita)"] <- "consumo_kwh_per_capita"
#Converter consumo_kwh_per_capita para formato numero
data_tcc$consumo_kwh_per_capita <- as.numeric(data_tcc$consumo_kwh_per_capita)
#Remover casas decimais da coluna "consumo_kwh_per_capita"
data_tcc$`consumo_kwh_per_capita` <- round(data_tcc$`consumo_kwh_per_capita`, digits = 0)
#####Merge da tabela idh_tcc com data_tcc#######
data_tcc <- merge(data_tcc, idh_transposta, by = c("pais", "ano"), all.x = TRUE)
#Verificar paises da tabela (atualmente temos 195 paises reconhecidos pela ONU)
paises_unicos_data_tcc <- unique(data_tcc$pais)
print(paises_unicos_data_tcc)
# Lista de países para remover
paises_remover <- c("Aruba", "Bermuda", "Cayman Islands", "New Caledonia", "Puerto Rico")
# Remover linhas correspondentes aos países a remover
data_tcc <- data_tcc[!(data_tcc$`pais` %in% paises_remover), ]
# Verificar o numero de dados ausentes em cada coluna
missing_data <- colSums(is.na(data_tcc))
# Mostrar o resultado
print(missing_data)
